{
  "service": {
    "service": "api-diff",
    "serviceObject": {
      "name": "api-diff",
      "awsKmsKeyArn": "arn:aws:kms:ap-southeast-1:209826661801:key/f204d1be-4b43-4759-afbd-4a5218401ffa"
    },
    "provider": {
      "stage": "dev",
      "region": "ap-southeast-1",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "runtime": "nodejs8.10",
      "versionFunctions": true,
      "remoteFunctionData": null,
      "environment": {
        "SERVERLESS_EXPRESS_PLATFORM": "aws",
        "ENDPOINT": "52.221.190.105",
        "DATABASE": "carsome_v3_my_kimi",
        "USERNAME": "root",
        "PASSWORD": "Carsome123!",
        "STAGE": "prod",
        "AWS_REGION": "ap-southeast-1"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-diff-dev-hello"
            }
          },
          "WorldLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/api-diff-dev-world"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "api-diff",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-diff-dev-hello:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-diff-dev-world:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-diff-dev-hello:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-diff-dev-world:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "kms:Decrypt"
                        ],
                        "Resource": [
                          "arn:aws:kms:ap-southeast-1:209826661801:key/f204d1be-4b43-4759-afbd-4a5218401ffa"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "api-diff",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/api-diff/dev/1559293903473-2019-05-31T09:11:43.473Z/api-diff.zip"
              },
              "FunctionName": "api-diff-dev-hello",
              "Handler": "handler.hello",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "KmsKeyArn": "arn:aws:kms:ap-southeast-1:209826661801:key/f204d1be-4b43-4759-afbd-4a5218401ffa",
              "Environment": {
                "Variables": {
                  "SERVERLESS_EXPRESS_PLATFORM": "aws",
                  "ENDPOINT": "52.221.190.105",
                  "DATABASE": "carsome_v3_my_kimi",
                  "USERNAME": "root",
                  "PASSWORD": "Carsome123!",
                  "STAGE": "prod",
                  "AWS_REGION": "ap-southeast-1"
                }
              }
            },
            "DependsOn": [
              "HelloLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "HelloLambdaVersionRvourncQeGBtGj9WHgkWukvgmP4AS1rqx9AlHYqYA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloLambdaFunction"
              },
              "CodeSha256": "9eUScnMDDKMFi/m3w/hUUKYfNfv3tC1WUXobjUtd6Bs="
            }
          },
          "WorldLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/api-diff/dev/1559293903473-2019-05-31T09:11:43.473Z/api-diff.zip"
              },
              "FunctionName": "api-diff-dev-world",
              "Handler": "handler.world",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "KmsKeyArn": "arn:aws:kms:ap-southeast-1:209826661801:key/f204d1be-4b43-4759-afbd-4a5218401ffa",
              "Environment": {
                "Variables": {
                  "SERVERLESS_EXPRESS_PLATFORM": "aws",
                  "ENDPOINT": "52.221.190.105",
                  "DATABASE": "carsome_v3_my_kimi",
                  "USERNAME": "root",
                  "PASSWORD": "Carsome123!",
                  "STAGE": "prod",
                  "AWS_REGION": "ap-southeast-1"
                }
              }
            },
            "DependsOn": [
              "WorldLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "WorldLambdaVersionOPep3qMNhox9z5Fc9yBMThc3v2VNdVihPCPMozLf8U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WorldLambdaFunction"
              },
              "CodeSha256": "9eUScnMDDKMFi/m3w/hUUKYfNfv3tC1WUXobjUtd6Bs="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-api-diff",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceHello": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "hello",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWorld": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "world",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHelloGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHello"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HelloLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": "",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 401,
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 403,
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 404,
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 422,
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 500,
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 502,
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 504,
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(^[Task timed out].*)",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 400
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 401
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 403
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 404
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 422
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 500
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 502
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 504
                }
              ]
            }
          },
          "ApiGatewayMethodWorldGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWorld"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WorldLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": "",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 401,
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 403,
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 404,
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 422,
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 500,
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 502,
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 504,
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(^[Task timed out].*)",
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 400
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 401
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 403
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 404
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 422
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 500
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 502
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 504
                }
              ]
            }
          },
          "ApiGatewayDeployment1559293899676": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodHelloGet",
              "ApiGatewayMethodWorldGet"
            ]
          },
          "HelloLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WorldLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WorldLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloLambdaVersionRvourncQeGBtGj9WHgkWukvgmP4AS1rqx9AlHYqYA"
            }
          },
          "WorldLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WorldLambdaVersionOPep3qMNhox9z5Fc9yBMThc3v2VNdVihPCPMozLf8U"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "customDomain": {
        "domainName": "apsls.carsome.my",
        "basePath": "(none)",
        "stage": "dev",
        "certificateName": "apsls.carsome.my",
        "createRoute53Record": true
      }
    },
    "plugins": [
      "serverless-domain-manager",
      "serverless-express",
      "serverless-dotenv-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "hello": {
        "handler": "handler.hello",
        "events": [
          {
            "http": {
              "path": "hello",
              "integration": "AWS",
              "method": "get",
              "request": {
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "200": {
                    "pattern": ""
                  },
                  "400": {
                    "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                  },
                  "401": {
                    "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                  },
                  "403": {
                    "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                  },
                  "404": {
                    "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                  },
                  "422": {
                    "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                  },
                  "500": {
                    "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                  },
                  "502": {
                    "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                  },
                  "504": {
                    "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(^[Task timed out].*)"
                  }
                }
              }
            }
          }
        ],
        "name": "api-diff-dev-hello",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "world": {
        "handler": "handler.world",
        "events": [
          {
            "http": {
              "path": "world",
              "integration": "AWS",
              "method": "get",
              "request": {
                "passThrough": "NEVER"
              },
              "response": {
                "statusCodes": {
                  "$ref": "$[\"service\"][\"functions\"][\"hello\"][\"events\"][0][\"http\"][\"response\"][\"statusCodes\"]"
                }
              }
            }
          }
        ],
        "name": "api-diff-dev-world",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      }
    },
    "layers": {},
    "artifact": "/Users/aa6my/aws/api-test/.serverless/api-diff.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/api-diff/dev/1559293903473-2019-05-31T09:11:43.473Z",
    "artifact": "api-diff.zip"
  }
}